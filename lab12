#Вычислить сумму знакопеременного ряда |х*2n!|/(2n)!, где х-матрица ранга к (к и матрица задаются случайным образом), n - номер слагаемого.
#Сумма считается вычисленной, если точность вычислений будет не меньше t знаков после запятой.
#У алгоритма д.б. линейная сложность. Знак первого слагаемого  -.
import numpy as np
import random
#Создание матрицы
t = int(input("Введите количество знаков после запятой при вычислении неточности : "))
k = random.randint(1,4)
x = np.random.uniform(-1, 1, (k, k))
print(f"Матрица: \n{x}")
#Определитель
print(f"Определитель: {np.linalg.det(x)}")
#вычисление суммы знакопеременного ряда
n = 1
before_digit, result, accuracy = 0, 0, 1
fact_denominator, fact_numerator = 1, 1
while abs(accuracy) > (0.1**t):
    before_digit += result
    fact_numerator = (2 * n - 1) * (2 * n)
    fact_denominator *= (2 * n - 1) * (2 * n)
    result += abs(np.linalg.det(x*fact_numerator).astype("float64")) / fact_denominator
    n += 1
    accuracy = abs(before_digit - result)
    before_digit = 0
#Вывод результатов
print(f"\nИтоговая сумма: {result:.{t}f}")
print(f"Кол-во итераций: {n-1}")
